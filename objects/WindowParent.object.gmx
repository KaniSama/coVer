<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///window properties

destWidth = 250;
destHeight = 180;

width = 0;
height = 0;

border = 2;

gripped = false;
top_most = false;

Controller.activeLast = id;
ds_list_add(Controller.windows, id);
RearrangeWindows(Controller);

controlPanelWidth = 32;
padding = 16;

state = "opening";

//button = "none";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// window contents
content = surface_create(width-padding-padding, height-padding-padding);
contentX = x+padding;
contentY = y+padding+HEADER_HEIGHT;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pos = ds_list_find_index(Controller.windows, id);
ds_list_delete(Controller.windows, pos);
ArrangeWindows(Controller);

if (surface_exists(content)) {
    surface_free(content);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// code for moving the window around
if (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, x+border, y+border, x+width-border-controlPanelWidth, y+HEADER_HEIGHT)) {
    mouseInsideWindow = false;
    window = id;
    for (i = 0; i &lt; ds_list_size(Controller.windows) &amp;&amp; !mouseInsideWindow; i++) {
        ai = Controller.windows[| i];
        if (ai == id) {
            continue;
        }
        if (point_in_rectangle(mouse_x, mouse_y, ai.x, ai.y, ai.x+ai.width, ai.y+ai.height)) 
        {
            mouseInsideWindow = true;
            window = ai;
        }
    }
    if (!mouseInsideWindow || id.depth &lt; window.depth) {
        gripped = id;
        Controller.activeLast = id;
        RearrangeWindows(Controller);
        
        grip_offset_x = mouse_x - x;
        grip_offset_y = mouse_y - y;
    }
}
if (gripped == id) {
    x = mouse_x - grip_offset_x;
    y = mouse_y - grip_offset_y;
    
    x = clamp(x, 0 - width + border + 10, room_width - border - 10);
    y = clamp(y, 0, room_height - HEADER_HEIGHT - border - TASKBAR_HEIGHT);
}



// code for releasing the window
if (mouse_check_button_released(mb_left) &amp;&amp; gripped == id) {
    gripped = false;
}

// code for resizing the window
if (state == "opening") {
    if (width != destWidth || height != destHeight) {
        if (width &lt; destWidth) {
            width += 64;
            width = clamp(width, 32, destWidth);
        }
        if (height &lt; destHeight) {
            height += 44;
            height = clamp(height, 32, destHeight);
        }
    } else {
        state = "opened";
    }
}

contentX = x+padding;
contentY = y+padding+HEADER_HEIGHT;

// code for closing the window
if (mouse_check_button_pressed(mb_left) &amp;&amp;
    point_in_rectangle(mouse_x, mouse_y, x+border+width-controlPanelWidth, y+border, x+width-border, y+HEADER_HEIGHT) &amp;&amp;
    Controller.activeLast == id)
{
    state = "closing";
}
if (surface_exists(content) &amp;&amp; state == "closing") {
    surface_free(content);
}
if (state == "closing") {
    if (DiminishWindow(id)) {
        instance_destroy();
    }
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Controller.activeLast == id) {
    draw_set_colour(c_black);
    draw_set_alpha(.5);
    draw_rectangle(x+5, y+5, x+width+5, y+height+5, false);
}
draw_set_alpha(1);

draw_set_colour(c_ltgray);
draw_rectangle(x, y, x+width, y+height, false);

if (Controller.activeLast == id) {
    draw_set_colour(c_maroon);
} else {
    draw_set_colour(c_dkgray);
}
draw_rectangle(x+border, y+border, x+width-border, y+HEADER_HEIGHT-border, false);

if (Controller.activeLast == id) {
    draw_set_colour(c_black);
} else {
    draw_set_colour(c_dkgray);
}

draw_rectangle(x-border+1, y-border+1, x+width+border-1, y+height+border-1, true);

draw_set_colour(c_white);
draw_set_font(CommieFont);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(x+width-controlPanelWidth+16, y+4, "/");

surface_set_target(content);
    if (state == "opened") {
        draw_set_colour(c_ltgray);
        draw_rectangle(contentX, contentY, x+width-padding, y+height-padding, false);
    }
surface_reset_target();

surface_set_target(application_surface);
    //draw_surface(content, contentX, contentY);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
